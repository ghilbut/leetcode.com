#-*- coding:utf-8 -*-
import os
import sys

from subprocess import call

BASEPATH = Dir('.').abspath



################################################################
##  set environment and get build options
################################################################

cpppath = [
  'googletest/googletest/include',
  'googletest/googletest',
  '.',
]

env = Environment(CPPPATH=cpppath, CXXFLAGS='-std=c++14')
is_clean = env.GetOption('clean')

# don't clone or update from git repository when clean
if not is_clean:
  gitpath = os.path.join(BASEPATH, 'googletest')
  if os.path.exists(gitpath):
    os.chdir(gitpath)
    call(['git', 'pull'])
    os.chdir(BASEPATH)
  else:
    url = 'https://github.com/google/googletest.git'
    call(['git', 'clone', url])



################################################################
##  build static library
################################################################

sources = [
    'googletest/googletest/src/gtest-all.cc',
    'googletest/googletest/src/gtest_main.cc',
  ] + [s for s in Glob('*.cpp') if not s.name.endswith('_test.cpp')]

# build static library
lib = env.StaticLibrary(target='test', source=sources)
#env.Install('./', ['googletest/googletest/src/gtest_main.cc',])
#env.Alias('install', './')
#Default('install')



################################################################
##  build and run unit-test
################################################################

LIBPATH = [ '.' ]
LIBS    = [ 'test' ]
sources = Glob('*_test.cpp')

if os.name == 'posix':
  env.Append(LINKFLAGS=['-pthread'])
test = env.Program(target='test', source=sources, LIBS=LIBS, LIBPATH=LIBPATH)

Command(
  'test-harness', 
  test, 
  lambda env, target, source: os.system(source[0].abspath))
